library(ggplot2)
p <-ggplot(Map1@data, aes(a1,a2))
p + geom_point()
map1.f <-fortify(Map1, region = "a1")
library(rgdal)
map1 <-readOGR (dsn = ".", "4ZONES_TR")
summary(map1)
library(ggplot2)
p <-ggplot(map1@data, aes(a1,a2))
p + geom_point()
map1.f <-fortify(map1, region = "a1")
map1.f <-merge(map1.f, map1@data, by.x = "id", by.y = "a1")
head (map1.f)
finalmap <-ggplot(map1.f, aes(long,lat,group=group, fill= a1))+coord_equal()
+labs(x="Easting (m)",y = "Northing (m)", fill = "% a1")+ ggtitle ("Trialmap")
finalmap <-ggplot(map1.f, aes(long,lat,group=group, fill= a1))+coord_equal()
+ labs(x="Easting (m)", y = "Northing (m)", fill = "% a1")+ ggtitle ("Trialmap")
finalmap <-ggplot(map1.f, aes(long, lat, group=group, fill= a1))+geom_polygon()+coord_equal()
+ labs(x="Easting (m)", y = "Northing (m)", fill = "% a1")+ ggtitle ("Trialmap")
finalmap
library(rgdal)
map1 <-readOGR (dsn = ".", "4ZONES_TR")
summary(map1)
library(ggplot2)
p <-ggplot(map1@data, aes(a1,a2))
p + geom_point()
map1.f <-fortify(map1, region = "a1")
map1.f <-merge(map1.f, map1@data, by.x = "id", by.y = "a1")
head (map1.f)
finalmap <-ggplot(map1.f, aes(long, lat, group=group, fill= a1))+geom_polygon()+coord_equal()
+ labs(x="Easting (m)", y = "Northing (m)", fill = "% a1")+ ggtitle ("Trialmap")
finalmap
finalmap <-ggplot(map1.f, aes(long, lat, group=group, fill= a1))+geom_polygon()+coord_equal()
+ labs(x="Easting (m)", y = "Northing (m)", fill = "% a2")+ ggtitle ("Trialmap")
finalmap <-ggplot(map1.f, aes(long, lat, group=group, fill= a1))+geom_polygon()+coord_equal()
ggtitle ("Trialmap")
finalmap <-ggplot(map1.f, aes(long, lat, group=group, fill= a1))+geom_polygon()+coord_equal()
ggtitle ("Trialmap")
finalmap
finalmap <-ggplot(map1.f, aes(long, lat, group=group, fill= a2))+geom_polygon()+coord_equal()
ggtitle ("Trialmap")
finalmap
library(rgdal)
map1 <-readOGR (dsn = ".", "4ZONES_TR")
summary(map1)
library(ggplot2)
p <-ggplot(map1@data, aes(a1,a2))
p + geom_point()
map1.f <-fortify(map1, region = "a1")
map1.f <-merge(map1.f, map1@data, by.x = "id", by.y = "a1")
head (map1.f)
finalmap <-ggplot(map1.f, aes(long, lat, group=group, fill= a2))+geom_polygon()+coord_equal()
ggtitle ("Trialmap")
finalmap
library(XLConnect)
wk = loadWorkbook("Trialexport.xls")
df = readWorksheet(wk, sheet = "Sheet1")
head(df)
library(rgdal)
map1 <-readOGR (dsn = ".", "4ZONES_TR")
summary(map1)
library(ggplot2)
p <-ggplot(map1@data, aes(a1,a2))
p + geom_point()
map1.f <-fortify(map1, region = "a2")
map1.f <-merge(map1.f, map1@data, by.x = "id", by.y = "a2")
head (map1.f)
finalmap <-ggplot(map1.f, aes(long, lat, group=group, fill= a1))+geom_polygon()+coord_equal()
ggtitle ("Trialmap")
finalmap
library(rgdal)
map1 <-readOGR (dsn = ".", "4ZONES_TR")
summary(map1)
library(ggplot2)
p <-ggplot(map1@data, aes(a1,a2))
p + geom_point()
map1.f <-fortify(map1, region = "a2")
map1.f <-merge(map1.f, map1@data, by.x = "id", by.y = "a2")
head (map1.f)
finalmap <-ggplot(map1.f, aes(long, lat, group=group, fill= a2))+geom_polygon()+coord_equal()
ggtitle ("Trialmap")
finalmap
library(rgdal)
map1 <-readOGR (dsn = ".", "4ZONES_TR")
summary(map1)
library(ggplot2)
p <-ggplot(map1@data, aes(a1,a2))
p + geom_point()
map1.f <-fortify(map1, region = "a2")
map1.f <-merge(map1.f, map1@data, by.x = "id", by.y = "a1")
head (map1.f)
finalmap <-ggplot(map1.f, aes(long, lat, group=group, fill= a1))+geom_polygon()+coord_equal()
ggtitle ("Trialmap")
finalmap
library(rgdal)
map1 <-readOGR (dsn = ".", "4ZONES_TR")
summary(map1)
library(ggplot2)
p <-ggplot(map1@data, aes(a1,a2))
p + geom_point()
map1.f <-fortify(map1, region = "a2")
map1.f <-merge(map1.f, map1@data, by.x = "id", by.y = "a2")
head (map1.f)
finalmap <-ggplot(map1.f, aes(long, lat, group=group, fill= a1))+geom_polygon()+coord_equal()
ggtitle ("Trialmap")
finalmap
foreign::read.dbf(file.choose())
library(XLConnect)
wk = loadWorkbook("Trialexport.xls")
df = readWorksheet(wk, sheet = "Sheet1")
head(df)
library(rgdal)
map1 <-readOGR (dsn = ".", "4ZONES_TR")
summary(map1)
library(ggplot2)
p <-ggplot(map1@data, aes(a1,a2))
p + geom_point()
map1.f <-fortify(map1, region = "a2")
map1.f <-merge(map1.f, map1@data, by.x = "id", by.y = "a2")
head (map1.f)
finalmap <-ggplot(map1.f, aes(long, lat, group=group, fill= a1))+geom_polygon()+coord_equal()
ggtitle ("Trialmap")
finalmap
#Reading Xls data from Stella
library(XLConnect)
wk = loadWorkbook("Trialexport.xls")
df = readWorksheet(wk, sheet = "Sheet1")
head(df)
foreign::read.dbf(file.choose())
foreign::read.dbf(file.choose())
dbfdata$new.att <- 1:nrow(dbfdata)
library(foreign)
dbfdata <-read.dbf(file.choose())
dbfdata$new.att <-1:nrow(dbfdata)
write.dbf(dbfdata,"newfile.dbf")
dbfdata$a1 <- c(2,4,5,6)
write.dbf(dbfdata,"newfile.dbf")
write.dbf(dbfdata,"newfile.dbf")
head(df)
dfZ1 <-df[4:6,1]
dfZ1
dfZ1 <- df[1, 4:6]
dfZ1
dfZ2 <- df[1, 7:9]
dfZ2
dfZ3 <- df[1, 10:12]
dfZ3
dfz4 <- df[1, 13:15]
dfz4
library(foreign)
> dbfdata <-read.dbf(file.choose())
library(foreign)> dbfdata <-read.dbf(file.choose())
library(foreign)
dbfdata <-read.dbf(file.choose())
dbfdata
dfdata$a1 <- dfZ1
dbfdata <-read.dbf(file.choose())
dbfdata$a1 <- dfZ1
dfZ <- rbind(dfZ1,dfZ2, dfZ3, dfZ4)
dfZ <- rbind(dfZ1,dfZ2, dfZ3, dfz4)
names(dfZ2) <- names(dfZ1)
names(dfZ3) <- names(dfZ1)
names(dfz4) <- names(dfZ1)
dfZ <- rbind(dfZ1,dfZ2, dfZ3, dfz4)
dfZ
dbfdata$a1 <- dfZ[1:4,1]
dbfdata
dbfdata$a2 <- dfZ[1:4,2]
dbfdata
dbfdata$a3 <- dfZ[1:4,3]
dbfdata
library(XLConnect)
wk = loadWorkbook("Trialexport.xls")
df = readWorksheet(wk, sheet = "Sheet1")
head(df)
library(foreign)
dbfdata <-read.dbf("4ZONES_TR.dbf")
dfZ1 <- df[1, 4:6]
dfZ2 <- df[1, 7:9]
dfZ3 <- df[1, 10:12]
dfZ4 <- df[1, 13:15]
names(dfZ2) <- names(dfZ1)
names(dfZ3) <- names(dfZ1)
names(dfZ4) <- names(dfZ1)
dfZ <- rbind(dfZ1,dfZ2, dfZ3, dfZ4)
dbfdata$a1 <- dfZ[1:4,1]
dbfdata$a2 <- dfZ[1:4,2]
dbfdata$a3 <- dfZ[1:4,3]
dbfdata
# Reading Shapefile into R
library(rgdal)
map1 <-readOGR (dsn = ".", "4ZONES_TR")
## summary(map1)
library(ggplot2)
## p <-ggplot(map1@data, aes(a1,a2))
## p + geom_point()
# Fortifying with a2, Map showing according to a1
map1.f <-fortify(map1, region = "a2")
map1.f <-merge(map1.f, map1@data, by.x = "id", by.y = "a2")
head (map1.f)
finalmap <-ggplot(map1.f, aes(long, lat, group=group, fill= a3))+geom_polygon()+coord_equal()
ggtitle ("Trialmap")
finalmap
library(XLConnect)
wk = loadWorkbook("Trialexport.xls")
df = readWorksheet(wk, sheet = "Sheet1")
#Reading data from shapefile attribute table as dbf
library(foreign)
dbfdata <-read.dbf("4ZONES_TR.dbf")
#Extracting data from excel file from Stella according to Zones
dfZ1 <- df[1, 4:6]
dfZ2 <- df[1, 7:9]
dfZ3 <- df[1, 10:12]
dfZ4 <- df[1, 13:15]
#Making heads same for the dbf coloumn swap function to work
names(dfZ2) <- names(dfZ1)
names(dfZ3) <- names(dfZ1)
names(dfZ4) <- names(dfZ1)
dfZ <- rbind(dfZ1,dfZ2, dfZ3, dfZ4)
# rewriting dbf data of shapefile
dbfdata$a1 <- dfZ[1:4,1]
dbfdata$a2 <- dfZ[1:4,2]
dbfdata$a3 <- dfZ[1:4,3]
dbfdata
# Replacing original dbf in the shapefile
write.dbf (dbfdata,"4ZONES_TR.dbf")
# Reading Shapefile into R
library(rgdal)
map1 <-readOGR (dsn = ".", "4ZONES_TR")
## summary(map1)
library(ggplot2)
## p <-ggplot(map1@data, aes(a1,a2))
## p + geom_point()
# Fortifying with a2, Map showing according to a1
map1.f <-fortify(map1, region = "a2")
map1.f <-merge(map1.f, map1@data, by.x = "id", by.y = "a2")
head (map1.f)
finalmap <-ggplot(map1.f, aes(long, lat, group=group, fill= a3))+geom_polygon()+coord_equal()
ggtitle ("Trialmap")
finalmap
#Reading Xls data from Stella
library(XLConnect)
wk = loadWorkbook("Trialexport.xls")
df = readWorksheet(wk, sheet = "Sheet1")
#Reading data from shapefile attribute table as dbf
library(foreign)
dbfdata <-read.dbf("4ZONES_TR.dbf")
#Extracting data from excel file from Stella according to Zones
dfZ1 <- df[1, 4:6]
dfZ2 <- df[1, 7:9]
dfZ3 <- df[1, 10:12]
dfZ4 <- df[1, 13:15]
#Making heads same for the dbf coloumn swap function to work
names(dfZ2) <- names(dfZ1)
names(dfZ3) <- names(dfZ1)
names(dfZ4) <- names(dfZ1)
dfZ <- rbind(dfZ1,dfZ2, dfZ3, dfZ4)
# rewriting dbf data of shapefile
dbfdata$a1 <- dfZ[1:4,1]
dbfdata$a2 <- dfZ[1:4,2]
dbfdata$a3 <- dfZ[1:4,3]
dbfdata
# Replacing original dbf in the shapefile
write.dbf (dbfdata,"4ZONES_TR.dbf")
# New map plotting
finalmap
install.packages("netlogo")
install.packages("RNetLogo")
nl.path <- getwd()
NLStart(nl.path)
library(RNetLogo)
nl.path <- getwd()
NLStart(nl.path)
NLStart("C:\Program Files (x86)\NetLogo 5.2.0")
NLStart("C:/Program Files (x86)/NetLogo 5.2.0")
getwd()
setwd("C:GITHUB/Sys_dyn")
library(rgdal)
Builtex <- readOGR(dsn = ".", "zones")  #dsn is a data source name
names(Builtex) #headings of the spatial dataframe
summary(Builtex)
proj4string(Builtex) <- CRS("init=epsg:32643)") # changing coordinate system of shapefile
library(rgeos)
Builtex.f <- fortify(Builtex, region = "area")
# fortify actually plots
Builtex.f <- merge(Builtex.f, Builtex@data, by.x = "id", by.y = "area")
# merge is required to merge the attribute table to the shapefiles.
head(Builtex.f[, 1:8])
Map <- ggplot(Builtex.f, aes(long, lat, group = group, fill = Zone_no_)) + geom_polygon() +
coord_equal() + labs(x = "Easting (m)", y = "Northing (m)", fill = "Zones") + ggtitle( " Bhopal Zonal Map")
library(rgdal)
Builtex <- readOGR(dsn = ".", "zones")  #dsn is a data source name
names(Builtex) #headings of the spatial dataframe
summary(Builtex)
proj4string(Builtex) <- CRS("init=epsg:32643)") # changing coordinate system of shapefile
library(rgeos)
library(ggplot)
Builtex.f <- fortify(Builtex, region = "area")
# fortify actually plots
Builtex.f <- merge(Builtex.f, Builtex@data, by.x = "id", by.y = "area")
# merge is required to merge the attribute table to the shapefiles.
head(Builtex.f[, 1:8])
Map <- ggplot(Builtex.f, aes(long, lat, group = group, fill = Zone_no_)) + geom_polygon() +
coord_equal() + labs(x = "Easting (m)", y = "Northing (m)", fill = "Zones") + ggtitle( " Bhopal Zonal Map")
library(rgdal)
Builtex <- readOGR(dsn = ".", "zones")  #dsn is a data source name
names(Builtex) #headings of the spatial dataframe
summary(Builtex)
proj4string(Builtex) <- CRS("init=epsg:32643)") # changing coordinate system of shapefile
library(rgeos)
library(ggplot2)
Builtex.f <- fortify(Builtex, region = "area")
# fortify actually plots
Builtex.f <- merge(Builtex.f, Builtex@data, by.x = "id", by.y = "area")
# merge is required to merge the attribute table to the shapefiles.
head(Builtex.f[, 1:8])
Map <- ggplot(Builtex.f, aes(long, lat, group = group, fill = Zone_no_)) + geom_polygon() +
coord_equal() + labs(x = "Easting (m)", y = "Northing (m)", fill = "Zones") + ggtitle( " Bhopal Zonal Map")
library(rgdal)
Builtex <- readOGR(dsn = ".", "zones")  #dsn is a data source name
names(Builtex) #headings of the spatial dataframe
summary(Builtex)
proj4string(Builtex) <- CRS("init=epsg:32643)") # changing coordinate system of shapefile
library(rgeos)
library(ggplot2)
Builtex.f <- fortify(Builtex, region = "area")
# fortify actually plots
Builtex.f <- merge(Builtex.f, Builtex@data, by.x = "id", by.y = "area")
# merge is required to merge the attribute table to the shapefiles.
head(Builtex.f[, 1:8])
Map <- ggplot(Builtex.f, aes(long, lat, group = group, fill = Zone_no_)) + geom_polygon() +
coord_equal() + labs(x = "Easting (m)", y = "Northing (m)", fill = "Zones") + ggtitle( " Bhopal Zonal Map")
library(rgdal)
Builtex <- readOGR(dsn = ".", "zones")  #dsn is a data source name
names(Builtex) #headings of the spatial dataframe
summary(Builtex)
proj4string(Builtex) <- CRS("init=epsg:32643)") # changing coordinate system of shapefile
library(rgeos)
library(ggplot2)
Builtex.f <- fortify(Builtex, region = "area")
# fortify actually plots
Builtex.f <- merge(Builtex.f, Builtex@data, by.x = "id", by.y = "area")
# merge is required to merge the attribute table to the shapefiles.
head(Builtex.f[, 1:8])
Map <- ggplot(Builtex.f, aes(long, lat, group = group, fill = Zone_no_)) + geom_polygon() +
coord_equal() + labs(x = "Easting (m)", y = "Northing (m)", fill = "Zones") + ggtitle( " Bhopal Zonal Map")
library(rgdal)
Builtex <- readOGR(dsn = ".", "zones")  #dsn is a data source name
setwd("C:/GITHUB/Sys_dyn")
library(rgdal)
Builtex <- readOGR(dsn = ".", "zones")  #dsn is a data source name
names(Builtex) #headings of the spatial dataframe
summary(Builtex)
proj4string(Builtex) <- CRS("init=epsg:32643)") # changing coordinate system of shapefile
library(rgeos)
library(ggplot2)
Builtex.f <- fortify(Builtex, region = "area")
# fortify actually plots
Builtex.f <- merge(Builtex.f, Builtex@data, by.x = "id", by.y = "area")
# merge is required to merge the attribute table to the shapefiles.
head(Builtex.f[, 1:8])
Map <- ggplot(Builtex.f, aes(long, lat, group = group, fill = Zone_no_)) + geom_polygon() +
coord_equal() + labs(x = "Easting (m)", y = "Northing (m)", fill = "Zones") + ggtitle( " Bhopal Zonal Map")
Map
library(ggplot2)
library(reshape2)
map.data <- read.csv("builtproj.csv")
map.data
map.data.melt <- melt(map.data, id = "Zone_no_")
map.data.melt
plot.data <- merge(sport.f, map.data.melt, by.x = "id", by.y = "Zone_no_")
plot.data <- merge(Builtex.f, map.data.melt, by.x = "id", by.y = "Zone_no_")
plot.data
plot.data <- plot.data[order(plot.data$order), ]
ggplot(data = plot.data, aes(x = long, y = lat, fill =value, group = group)) + geom_polygon() + geom_path(colour = "grey", lwd = 0.1) + coord_equal() + facet_wrap(~variable)
plot.data
ggplot(data = plot.data, aes(x = long, y = lat, fill =value, group = group))
ggplot(data = plot.data, aes(x = long, y = lat, fill =value, group = group)) + geom_polygon() + geom_path(colour = "grey", lwd = 0.1) + coord_equal()
ggplot(data = plot.data, aes(x = long, y = lat, fill =value, group = group)) + geom_polygon() + geom_path(colour = "grey", lwd = 0.1)
ggplot(data = plot.data, aes(x = long, y = lat, fill =value, group = group)) + geom_polygon()
plot.data <- plot.data[order(plot.data$order), ]
plot.data
library(rgdal)
Builtex <- readOGR(dsn = ".", "zones")  #dsn is a data source name
names(Builtex) #headings of the spatial dataframe
summary(Builtex)
proj4string(Builtex) <- CRS("init=epsg:32643)") # changing coordinate system of shapefile
library(rgeos)
library(ggplot2)
Builtex.f <- fortify(Builtex, region = "area")
# fortify actually plots
Builtex.f <- merge(Builtex.f, Builtex@data, by.x = "id", by.y = "area")
# merge is required to merge the attribute table to the shapefiles.
head(Builtex.f[, 1:8])
Map <- ggplot(Builtex.f, aes(long, lat, group = group, fill = Zone_no_)) + geom_polygon() +
coord_equal() + labs(x = "Easting (m)", y = "Northing (m)", fill = "Zones") + ggtitle( " Bhopal Zonal Map")
Map
plot.data <- merge(Builtex.f, map.data.melt, by.x = "id", by.y = "Zone_no_")
plot.data
plot.data <- plot.data[order(plot.data$order), ]
plot.data
ggplot(data = plot.data, aes(x = long, y = lat, fill =value, group = group)) + geom_polygon() + geom_path(colour = "grey", lwd = 0.1) + coord_equal() + facet_wrap(~variable)
map.data <- read.csv("builtproj.csv")
map.data
# data contains area code and population of various years.
map.data.melt <- melt(map.data, id = "Zone_no_")
plot.data <- merge(Builtex.f, map.data.melt, by.x = "id", by.y = "Zone_no_")
plot.data <- plot.data[order(plot.data$order), ]
ggplot(data = plot.data, aes(x = long, y = lat, fill =value, group = group)) + geom_polygon() + geom_path(colour = "grey") + coord_equal() + facet_wrap(~variable)
ggplot(data = plot.data, aes(x = long, y = lat, fill =value, group = group))
q <- ggplot(data = plot.data, aes(x = long, y = lat, fill =value, group = group))
q
q + + geom_polygon() + geom_path(colour = "grey", lwd = 0.1) + coord_equal() + facet_wrap(~variable)
q  + geom_polygon() + geom_path(colour = "grey", lwd = 0.1) + coord_equal() + facet_wrap(~variable)
q  +  geom_path(colour = "grey", lwd = 0.1) + coord_equal() + facet_wrap(~variable)
q  + geom_polygon() +  coord_equal() + facet_wrap(~variable)
q  + geom_polygon() + geom_path(colour = "grey", lwd = 0.1) + facet_wrap(~variable)
q  + geom_polygon() + geom_path(colour = "grey", lwd = 0.1) + coord_equal()
q  + geom_polygon() + geom_path(colour = "grey", lwd = 0.1) + coord_fixed(ratio = 5) + facet_wrap(~variable)
library(rgdal)
Builtex <- readOGR(dsn = ".", "zones")  #dsn is a data source name
names(Builtex) #headings of the spatial dataframe
summary(Builtex)
proj4string(Builtex) <- CRS("init=epsg:32643)") # changing coordinate system of shapefile
library(rgeos)
library(ggplot2)
Builtex.f <- fortify(Builtex, region = "Zone_no_")
# fortify actually plots
Builtex.f <- merge(Builtex.f, Builtex@data, by.x = "id", by.y = "Zone_no_")
# merge is required to merge the attribute table to the shapefiles.
head(Builtex.f[, 1:8])
library(maptools)
#loading the package
sport <- readShapePoly("london_sport.shp") #reading the shapefile
# but with no spatial referencing
library(rgdal)
sport <- readOGR(dsn = ".", "london_sport")  #dsn is a data source name
names(sport) #headings of the spatial dataframe
summary(sport)
proj4string(sport) <- CRS("init=epsg:27700)") # changing coordinate system of shapefile
library(rgeos)
sport.f <- fortify(sport, region = "ons_label")
# fortify actually plots
sport.f <- merge(sport.f, sport@data, by.x = "id", by.y = "ons_label")
# merge is required to merge the attribute table to the shapefiles.
head(sport.f[, 1:8])
library(maptools)
#loading the package
sport <- readShapePoly("london_sport.shp") #reading the shapefile
# but with no spatial referencing
library(rgdal)
sport <- readOGR(dsn = ".", "london_sport")  #dsn is a data source name
names(sport) #headings of the spatial dataframe
summary(sport)
proj4string(sport) <- CRS("init=epsg:27700)") # changing coordinate system of shapefile
library(rgeos)
sport.f <- fortify(sport, region = "ons_label")
# fortify actually plots
sport.f <- merge(sport.f, sport@data, by.x = "id", by.y = "ons_label")
# merge is required to merge the attribute table to the shapefiles.
head(sport.f[, 1:8])
Map <- ggplot(sport.f, aes(long, lat, group = group, fill = Partic_Per)) + geom_polygon() +
coord_equal() + labs(x = "Easting (m)", y = "Northing (m)", fill = "% Sport Partic.") + ggtitle( " London Sports Participation")
Map
library(rgdal)
Builtex <- readOGR(dsn = ".", "zones")  #dsn is a data source name
names(Builtex) #headings of the spatial dataframe
summary(Builtex)
proj4string(Builtex) <- CRS("init=epsg:32643)") # changing coordinate system of shapefile
library(rgeos)
library(ggplot2)
Builtex.f <- fortify(Builtex, region = "Zone_no_")
# fortify actually plots
Builtex.f <- merge(Builtex.f, Builtex@data, by.x = "id", by.y = "Zone_no_")
# merge is required to merge the attribute table to the shapefiles.
head(Builtex.f[, 1:8])
Map <- ggplot(Builtex.f, aes(long, lat, group = group, fill = Zone_no_)) + geom_polygon() +
coord_equal() + labs(x = "Easting (m)", y = "Northing (m)", fill = "Zones") + ggtitle( " Bhopal Zonal Map")
Map
Map <- ggplot(Builtex.f, aes(long, lat, group = group, fill = area)) + geom_polygon() +
coord_equal() + labs(x = "Easting (m)", y = "Northing (m)", fill = "Zones") + ggtitle( " Bhopal Zonal Map")
Map
input <- read.csv("ambulance_assault.csv")
head(input)
library(reshape2)
london.data <- read.csv("census-historic-population-borough.csv")
london.data
library(reshape2)
map.data <- read.csv("builtproj.csv")
map.data
london.data.melt <- melt(london.data, id = c("Area.Code","Area.Name"))
london.data.melt
london.data.melt <- melt(london.data, id ="Area.Name")
london.data.melt
london.data.melt <- melt(london.data, id ="Area.Name")
plot.data <- merge(sport.f, london.data.melt, by.x = "id", by.y = "Area.Code")
plot.data <- plot.data[order(plot.data$order), ]
ggplot(data = plot.data, aes(x = long, y = lat, fill =value, group = group)) + geom_polygon() + geom_path(colour = "grey", lwd = 0.1) + coord_equal() + facet_wrap(~variable)
london.data.melt <- melt(london.data, id = c("Area.Code", "Area.Name"))
plot.data <- merge(sport.f, london.data.melt, by.x = "id", by.y = "Area.Code")
plot.data <- plot.data[order(plot.data$order), ]
ggplot(data = plot.data, aes(x = long, y = lat, fill =value, group = group)) + geom_polygon() + geom_path(colour = "grey", lwd = 0.1) + coord_equal() + facet_wrap(~variable)
map.data.melt <- melt(map.data, id = c ("Zone_no_"))
plot.data <- merge(Builtex.f, map.data.melt, by.x = "id", by.y = "Zone_no_")
plot.data <- plot.data[order(plot.data$order), ]
q <- ggplot(data = plot.data, aes(x = long, y = lat, fill =value, group = group))
q  + geom_polygon() + geom_path(colour = "grey", lwd = 0.1) + coord_fixed(ratio = 5) + facet_wrap(~variable)
map.data.melt <- melt(map.data, id = c ("Zone_no_"))
plot.data <- merge(Builtex.f, map.data.melt, by.x = "id", by.y = "Zone_no_")
plot.data <- plot.data[order(plot.data$order), ]
q <- ggplot(data = plot.data, aes(x = long, y = lat, fill =value, group = group))
q  + geom_polygon() + geom_path(colour = "grey", lwd = 0.1) + coord_equal() + facet_wrap(~variable)
